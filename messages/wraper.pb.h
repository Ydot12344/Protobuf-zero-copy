// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wraper.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wraper_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_wraper_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/lazy_packed_field.h"
#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_wraper_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wraper_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_wraper_2eproto;
namespace NBench {
class TReportWraper;
struct TReportWraperDefaultTypeInternal;
extern TReportWraperDefaultTypeInternal _TReportWraper_default_instance_;
class TReportWraperLazy;
struct TReportWraperLazyDefaultTypeInternal;
extern TReportWraperLazyDefaultTypeInternal _TReportWraperLazy_default_instance_;
class TSubsourceResponse;
struct TSubsourceResponseDefaultTypeInternal;
extern TSubsourceResponseDefaultTypeInternal _TSubsourceResponse_default_instance_;
class TSubsourceResponseLazy;
struct TSubsourceResponseLazyDefaultTypeInternal;
extern TSubsourceResponseLazyDefaultTypeInternal _TSubsourceResponseLazy_default_instance_;
}  // namespace NBench
PROTOBUF_NAMESPACE_OPEN
template <>
::NBench::TReportWraper* Arena::CreateMaybeMessage<::NBench::TReportWraper>(Arena*);
template <>
::NBench::TReportWraperLazy* Arena::CreateMaybeMessage<::NBench::TReportWraperLazy>(Arena*);
template <>
::NBench::TSubsourceResponse* Arena::CreateMaybeMessage<::NBench::TSubsourceResponse>(Arena*);
template <>
::NBench::TSubsourceResponseLazy* Arena::CreateMaybeMessage<::NBench::TSubsourceResponseLazy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace NBench {

// ===================================================================


// -------------------------------------------------------------------

class TReportWraper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NBench.TReportWraper) */ {
 public:
  inline TReportWraper() : TReportWraper(nullptr) {}
  ~TReportWraper() override;
  explicit PROTOBUF_CONSTEXPR TReportWraper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TReportWraper(const TReportWraper& from);
  TReportWraper(TReportWraper&& from) noexcept
    : TReportWraper() {
    *this = ::std::move(from);
  }

  inline TReportWraper& operator=(const TReportWraper& from) {
    CopyFrom(from);
    return *this;
  }
  inline TReportWraper& operator=(TReportWraper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TReportWraper& default_instance() {
    return *internal_default_instance();
  }
  static inline const TReportWraper* internal_default_instance() {
    return reinterpret_cast<const TReportWraper*>(
               &_TReportWraper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TReportWraper& a, TReportWraper& b) {
    a.Swap(&b);
  }
  inline void Swap(TReportWraper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TReportWraper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TReportWraper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TReportWraper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TReportWraper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TReportWraper& from) {
    TReportWraper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TReportWraper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "NBench.TReportWraper";
  }
  protected:
  explicit TReportWraper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeFieldFieldNumber = 1,
    kReportFieldNumber = 2,
    kSomeValFieldNumber = 3,
  };
  // optional string some_field = 1;
  bool has_some_field() const;
  private:
  bool _internal_has_some_field() const;
  public:
  void clear_some_field();
  const std::string& some_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_some_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_some_field();
  PROTOBUF_NODISCARD std::string* release_some_field();
  void set_allocated_some_field(std::string* some_field);
  private:
  const std::string& _internal_some_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_field(const std::string& value);
  std::string* _internal_mutable_some_field();
  public:

  // optional .NBench.TReport report = 2;
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const ::NBench::TReport& report() const;
  PROTOBUF_NODISCARD ::NBench::TReport* release_report();
  ::NBench::TReport* mutable_report();
  void set_allocated_report(::NBench::TReport* report);
  private:
  const ::NBench::TReport& _internal_report() const;
  ::NBench::TReport* _internal_mutable_report();
  public:
  void unsafe_arena_set_allocated_report(
      ::NBench::TReport* report);
  ::NBench::TReport* unsafe_arena_release_report();

  // optional int32 some_val = 3;
  bool has_some_val() const;
  private:
  bool _internal_has_some_val() const;
  public:
  void clear_some_val();
  ::int32_t some_val() const;
  void set_some_val(::int32_t value);
  private:
  ::int32_t _internal_some_val() const;
  void _internal_set_some_val(::int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NBench.TReportWraper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_field_;
    ::NBench::TReport* report_;
    ::int32_t some_val_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wraper_2eproto;
};// -------------------------------------------------------------------

class TReportWraperLazy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NBench.TReportWraperLazy) */ {
 public:
  inline TReportWraperLazy() : TReportWraperLazy(nullptr) {}
  ~TReportWraperLazy() override;
  explicit PROTOBUF_CONSTEXPR TReportWraperLazy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TReportWraperLazy(const TReportWraperLazy& from);
  TReportWraperLazy(TReportWraperLazy&& from) noexcept
    : TReportWraperLazy() {
    *this = ::std::move(from);
  }

  inline TReportWraperLazy& operator=(const TReportWraperLazy& from) {
    CopyFrom(from);
    return *this;
  }
  inline TReportWraperLazy& operator=(TReportWraperLazy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TReportWraperLazy& default_instance() {
    return *internal_default_instance();
  }
  static inline const TReportWraperLazy* internal_default_instance() {
    return reinterpret_cast<const TReportWraperLazy*>(
               &_TReportWraperLazy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TReportWraperLazy& a, TReportWraperLazy& b) {
    a.Swap(&b);
  }
  inline void Swap(TReportWraperLazy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TReportWraperLazy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TReportWraperLazy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TReportWraperLazy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TReportWraperLazy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TReportWraperLazy& from) {
    TReportWraperLazy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TReportWraperLazy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "NBench.TReportWraperLazy";
  }
  protected:
  explicit TReportWraperLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeFieldFieldNumber = 1,
    kReportFieldNumber = 2,
    kSomeValFieldNumber = 3,
  };
  // optional string some_field = 1;
  bool has_some_field() const;
  private:
  bool _internal_has_some_field() const;
  public:
  void clear_some_field();
  const std::string& some_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_some_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_some_field();
  PROTOBUF_NODISCARD std::string* release_some_field();
  void set_allocated_some_field(std::string* some_field);
  private:
  const std::string& _internal_some_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_field(const std::string& value);
  std::string* _internal_mutable_some_field();
  public:

  // optional .NBench.TReport report = 2 [lazy_pack = true];
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const TLazyField<::NBench::TReport>& report() const;
  PROTOBUF_NODISCARD TLazyField<::NBench::TReport>* release_report();
  TLazyField<::NBench::TReport>* mutable_report();
  void set_allocated_report(TLazyField<::NBench::TReport>* report);
  private:
  const TLazyField<::NBench::TReport>& _internal_report() const;
  TLazyField<::NBench::TReport>* _internal_mutable_report();
  public:
  void unsafe_arena_set_allocated_report(
      TLazyField<::NBench::TReport>* report);
  TLazyField<::NBench::TReport>* unsafe_arena_release_report();

  // optional int32 some_val = 3;
  bool has_some_val() const;
  private:
  bool _internal_has_some_val() const;
  public:
  void clear_some_val();
  ::int32_t some_val() const;
  void set_some_val(::int32_t value);
  private:
  ::int32_t _internal_some_val() const;
  void _internal_set_some_val(::int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NBench.TReportWraperLazy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_field_;
    TLazyField<::NBench::TReport>* report_;
    ::int32_t some_val_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wraper_2eproto;
};// -------------------------------------------------------------------

class TSubsourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NBench.TSubsourceResponse) */ {
 public:
  inline TSubsourceResponse() : TSubsourceResponse(nullptr) {}
  ~TSubsourceResponse() override;
  explicit PROTOBUF_CONSTEXPR TSubsourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSubsourceResponse(const TSubsourceResponse& from);
  TSubsourceResponse(TSubsourceResponse&& from) noexcept
    : TSubsourceResponse() {
    *this = ::std::move(from);
  }

  inline TSubsourceResponse& operator=(const TSubsourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSubsourceResponse& operator=(TSubsourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSubsourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSubsourceResponse* internal_default_instance() {
    return reinterpret_cast<const TSubsourceResponse*>(
               &_TSubsourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TSubsourceResponse& a, TSubsourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TSubsourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSubsourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSubsourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSubsourceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSubsourceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSubsourceResponse& from) {
    TSubsourceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSubsourceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "NBench.TSubsourceResponse";
  }
  protected:
  explicit TSubsourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReponsesFieldNumber = 1,
  };
  // repeated .NBench.TReport reponses = 1;
  int reponses_size() const;
  private:
  int _internal_reponses_size() const;
  public:
  void clear_reponses();
  ::NBench::TReport* mutable_reponses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NBench::TReport >*
      mutable_reponses();
  private:
  const ::NBench::TReport& _internal_reponses(int index) const;
  ::NBench::TReport* _internal_add_reponses();
  public:
  const ::NBench::TReport& reponses(int index) const;
  ::NBench::TReport* add_reponses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NBench::TReport >&
      reponses() const;

  // @@protoc_insertion_point(class_scope:NBench.TSubsourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NBench::TReport > reponses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wraper_2eproto;
};// -------------------------------------------------------------------

class TSubsourceResponseLazy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NBench.TSubsourceResponseLazy) */ {
 public:
  inline TSubsourceResponseLazy() : TSubsourceResponseLazy(nullptr) {}
  ~TSubsourceResponseLazy() override;
  explicit PROTOBUF_CONSTEXPR TSubsourceResponseLazy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSubsourceResponseLazy(const TSubsourceResponseLazy& from);
  TSubsourceResponseLazy(TSubsourceResponseLazy&& from) noexcept
    : TSubsourceResponseLazy() {
    *this = ::std::move(from);
  }

  inline TSubsourceResponseLazy& operator=(const TSubsourceResponseLazy& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSubsourceResponseLazy& operator=(TSubsourceResponseLazy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSubsourceResponseLazy& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSubsourceResponseLazy* internal_default_instance() {
    return reinterpret_cast<const TSubsourceResponseLazy*>(
               &_TSubsourceResponseLazy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TSubsourceResponseLazy& a, TSubsourceResponseLazy& b) {
    a.Swap(&b);
  }
  inline void Swap(TSubsourceResponseLazy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSubsourceResponseLazy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSubsourceResponseLazy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSubsourceResponseLazy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSubsourceResponseLazy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSubsourceResponseLazy& from) {
    TSubsourceResponseLazy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSubsourceResponseLazy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "NBench.TSubsourceResponseLazy";
  }
  protected:
  explicit TSubsourceResponseLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReponsesFieldNumber = 1,
  };
  // repeated .NBench.TReport reponses = 1 [lazy_pack = true];
  int reponses_size() const;
  private:
  int _internal_reponses_size() const;
  public:
  void clear_reponses();
  TLazyField<::NBench::TReport>* mutable_reponses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< TLazyField<::NBench::TReport> >*
      mutable_reponses();
  private:
  const TLazyField<::NBench::TReport>& _internal_reponses(int index) const;
  TLazyField<::NBench::TReport>* _internal_add_reponses();
  public:
  const TLazyField<::NBench::TReport>& reponses(int index) const;
  TLazyField<::NBench::TReport>* add_reponses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< TLazyField<::NBench::TReport> >&
      reponses() const;

  // @@protoc_insertion_point(class_scope:NBench.TSubsourceResponseLazy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< TLazyField<::NBench::TReport> > reponses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wraper_2eproto;
};
// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TReportWraper

// optional string some_field = 1;
inline bool TReportWraper::_internal_has_some_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TReportWraper::has_some_field() const {
  return _internal_has_some_field();
}
inline void TReportWraper::clear_some_field() {
  _impl_.some_field_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TReportWraper::some_field() const {
  // @@protoc_insertion_point(field_get:NBench.TReportWraper.some_field)
  return _internal_some_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TReportWraper::set_some_field(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.some_field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NBench.TReportWraper.some_field)
}
inline std::string* TReportWraper::mutable_some_field() {
  std::string* _s = _internal_mutable_some_field();
  // @@protoc_insertion_point(field_mutable:NBench.TReportWraper.some_field)
  return _s;
}
inline const std::string& TReportWraper::_internal_some_field() const {
  return _impl_.some_field_.Get();
}
inline void TReportWraper::_internal_set_some_field(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.some_field_.Set(value, GetArenaForAllocation());
}
inline std::string* TReportWraper::_internal_mutable_some_field() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.some_field_.Mutable(GetArenaForAllocation());
}
inline std::string* TReportWraper::release_some_field() {
  // @@protoc_insertion_point(field_release:NBench.TReportWraper.some_field)
  if (!_internal_has_some_field()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.some_field_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.some_field_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TReportWraper::set_allocated_some_field(std::string* some_field) {
  if (some_field != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.some_field_.SetAllocated(some_field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.some_field_.IsDefault()) {
    _impl_.some_field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NBench.TReportWraper.some_field)
}

// optional .NBench.TReport report = 2;
inline bool TReportWraper::_internal_has_report() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.report_ != nullptr);
  return value;
}
inline bool TReportWraper::has_report() const {
  return _internal_has_report();
}
inline const ::NBench::TReport& TReportWraper::_internal_report() const {
  const ::NBench::TReport* p = _impl_.report_;
  return p != nullptr ? *p : reinterpret_cast<const ::NBench::TReport&>(
      ::NBench::_TReport_default_instance_);
}
inline const ::NBench::TReport& TReportWraper::report() const {
  // @@protoc_insertion_point(field_get:NBench.TReportWraper.report)
  return _internal_report();
}
inline void TReportWraper::unsafe_arena_set_allocated_report(
    ::NBench::TReport* report) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.report_);
  }
  _impl_.report_ = report;
  if (report) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NBench.TReportWraper.report)
}
inline ::NBench::TReport* TReportWraper::release_report() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::NBench::TReport* temp = _impl_.report_;
  _impl_.report_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::NBench::TReport* TReportWraper::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_release:NBench.TReportWraper.report)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::NBench::TReport* temp = _impl_.report_;
  _impl_.report_ = nullptr;
  return temp;
}
inline ::NBench::TReport* TReportWraper::_internal_mutable_report() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.report_ == nullptr) {
    auto* p = CreateMaybeMessage<::NBench::TReport>(GetArenaForAllocation());
    _impl_.report_ = p;
  }
  return _impl_.report_;
}
inline ::NBench::TReport* TReportWraper::mutable_report() {
  ::NBench::TReport* _msg = _internal_mutable_report();
  // @@protoc_insertion_point(field_mutable:NBench.TReportWraper.report)
  return _msg;
}
inline void TReportWraper::set_allocated_report(::NBench::TReport* report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.report_);
  }
  if (report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(report));
    if (message_arena != submessage_arena) {
      report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.report_ = report;
  // @@protoc_insertion_point(field_set_allocated:NBench.TReportWraper.report)
}

// optional int32 some_val = 3;
inline bool TReportWraper::_internal_has_some_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TReportWraper::has_some_val() const {
  return _internal_has_some_val();
}
inline void TReportWraper::clear_some_val() {
  _impl_.some_val_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TReportWraper::_internal_some_val() const {
  return _impl_.some_val_;
}
inline ::int32_t TReportWraper::some_val() const {
  // @@protoc_insertion_point(field_get:NBench.TReportWraper.some_val)
  return _internal_some_val();
}
inline void TReportWraper::_internal_set_some_val(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.some_val_ = value;
}
inline void TReportWraper::set_some_val(::int32_t value) {
  _internal_set_some_val(value);
  // @@protoc_insertion_point(field_set:NBench.TReportWraper.some_val)
}

// -------------------------------------------------------------------

// TReportWraperLazy

// optional string some_field = 1;
inline bool TReportWraperLazy::_internal_has_some_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TReportWraperLazy::has_some_field() const {
  return _internal_has_some_field();
}
inline void TReportWraperLazy::clear_some_field() {
  _impl_.some_field_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TReportWraperLazy::some_field() const {
  // @@protoc_insertion_point(field_get:NBench.TReportWraperLazy.some_field)
  return _internal_some_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TReportWraperLazy::set_some_field(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.some_field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NBench.TReportWraperLazy.some_field)
}
inline std::string* TReportWraperLazy::mutable_some_field() {
  std::string* _s = _internal_mutable_some_field();
  // @@protoc_insertion_point(field_mutable:NBench.TReportWraperLazy.some_field)
  return _s;
}
inline const std::string& TReportWraperLazy::_internal_some_field() const {
  return _impl_.some_field_.Get();
}
inline void TReportWraperLazy::_internal_set_some_field(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.some_field_.Set(value, GetArenaForAllocation());
}
inline std::string* TReportWraperLazy::_internal_mutable_some_field() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.some_field_.Mutable(GetArenaForAllocation());
}
inline std::string* TReportWraperLazy::release_some_field() {
  // @@protoc_insertion_point(field_release:NBench.TReportWraperLazy.some_field)
  if (!_internal_has_some_field()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.some_field_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.some_field_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TReportWraperLazy::set_allocated_some_field(std::string* some_field) {
  if (some_field != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.some_field_.SetAllocated(some_field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.some_field_.IsDefault()) {
    _impl_.some_field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NBench.TReportWraperLazy.some_field)
}

// optional .NBench.TReport report = 2 [lazy_pack = true];
inline bool TReportWraperLazy::_internal_has_report() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.report_ != nullptr);
  return value;
}
inline bool TReportWraperLazy::has_report() const {
  return _internal_has_report();
}
inline const TLazyField<::NBench::TReport>& TReportWraperLazy::_internal_report() const {
  const TLazyField<::NBench::TReport>* p = _impl_.report_;
  return p != nullptr ? *p : reinterpret_cast<const TLazyField<::NBench::TReport>&>(
      ::NBench::_TReport_default_instance_);
}
inline const TLazyField<::NBench::TReport>& TReportWraperLazy::report() const {
  // @@protoc_insertion_point(field_get:NBench.TReportWraperLazy.report)
  return _internal_report();
}
inline void TReportWraperLazy::unsafe_arena_set_allocated_report(
    TLazyField<::NBench::TReport>* report) {
  if (GetArenaForAllocation() == nullptr) {
    delete _impl_.report_;
  }
  _impl_.report_ = report;
  if (report) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NBench.TReportWraperLazy.report)
}
inline TLazyField<::NBench::TReport>* TReportWraperLazy::release_report() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  TLazyField<::NBench::TReport>* temp = _impl_.report_;
  _impl_.report_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline TLazyField<::NBench::TReport>* TReportWraperLazy::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_release:NBench.TReportWraperLazy.report)
  _impl_._has_bits_[0] &= ~0x00000002u;
  TLazyField<::NBench::TReport>* temp = _impl_.report_;
  _impl_.report_ = nullptr;
  return temp;
}
inline TLazyField<::NBench::TReport>* TReportWraperLazy::_internal_mutable_report() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.report_ == nullptr) {
    auto* p = CreateMaybeMessage<TLazyField<::NBench::TReport>>(GetArenaForAllocation());
    _impl_.report_ = p;
  }
  return _impl_.report_;
}
inline TLazyField<::NBench::TReport>* TReportWraperLazy::mutable_report() {
  TLazyField<::NBench::TReport>* _msg = _internal_mutable_report();
  // @@protoc_insertion_point(field_mutable:NBench.TReportWraperLazy.report)
  return _msg;
}
inline void TReportWraperLazy::set_allocated_report(TLazyField<::NBench::TReport>* report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.report_);
  }
  if (report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(report));
    if (message_arena != submessage_arena) {
      report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.report_ = report;
  // @@protoc_insertion_point(field_set_allocated:NBench.TReportWraperLazy.report)
}

// optional int32 some_val = 3;
inline bool TReportWraperLazy::_internal_has_some_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TReportWraperLazy::has_some_val() const {
  return _internal_has_some_val();
}
inline void TReportWraperLazy::clear_some_val() {
  _impl_.some_val_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TReportWraperLazy::_internal_some_val() const {
  return _impl_.some_val_;
}
inline ::int32_t TReportWraperLazy::some_val() const {
  // @@protoc_insertion_point(field_get:NBench.TReportWraperLazy.some_val)
  return _internal_some_val();
}
inline void TReportWraperLazy::_internal_set_some_val(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.some_val_ = value;
}
inline void TReportWraperLazy::set_some_val(::int32_t value) {
  _internal_set_some_val(value);
  // @@protoc_insertion_point(field_set:NBench.TReportWraperLazy.some_val)
}

// -------------------------------------------------------------------

// TSubsourceResponse

// repeated .NBench.TReport reponses = 1;
inline int TSubsourceResponse::_internal_reponses_size() const {
  return _impl_.reponses_.size();
}
inline int TSubsourceResponse::reponses_size() const {
  return _internal_reponses_size();
}
inline ::NBench::TReport* TSubsourceResponse::mutable_reponses(int index) {
  // @@protoc_insertion_point(field_mutable:NBench.TSubsourceResponse.reponses)
  return _impl_.reponses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NBench::TReport >*
TSubsourceResponse::mutable_reponses() {
  // @@protoc_insertion_point(field_mutable_list:NBench.TSubsourceResponse.reponses)
  return &_impl_.reponses_;
}
inline const ::NBench::TReport& TSubsourceResponse::_internal_reponses(int index) const {
  return _impl_.reponses_.Get(index);
}
inline const ::NBench::TReport& TSubsourceResponse::reponses(int index) const {
  // @@protoc_insertion_point(field_get:NBench.TSubsourceResponse.reponses)
  return _internal_reponses(index);
}
inline ::NBench::TReport* TSubsourceResponse::_internal_add_reponses() {
  return _impl_.reponses_.Add();
}
inline ::NBench::TReport* TSubsourceResponse::add_reponses() {
  ::NBench::TReport* _add = _internal_add_reponses();
  // @@protoc_insertion_point(field_add:NBench.TSubsourceResponse.reponses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NBench::TReport >&
TSubsourceResponse::reponses() const {
  // @@protoc_insertion_point(field_list:NBench.TSubsourceResponse.reponses)
  return _impl_.reponses_;
}

// -------------------------------------------------------------------

// TSubsourceResponseLazy

// repeated .NBench.TReport reponses = 1 [lazy_pack = true];
inline int TSubsourceResponseLazy::_internal_reponses_size() const {
  return _impl_.reponses_.size();
}
inline int TSubsourceResponseLazy::reponses_size() const {
  return _internal_reponses_size();
}
inline TLazyField<::NBench::TReport>* TSubsourceResponseLazy::mutable_reponses(int index) {
  // @@protoc_insertion_point(field_mutable:NBench.TSubsourceResponseLazy.reponses)
  return _impl_.reponses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< TLazyField<::NBench::TReport> >*
TSubsourceResponseLazy::mutable_reponses() {
  // @@protoc_insertion_point(field_mutable_list:NBench.TSubsourceResponseLazy.reponses)
  return &_impl_.reponses_;
}
inline const TLazyField<::NBench::TReport>& TSubsourceResponseLazy::_internal_reponses(int index) const {
  return _impl_.reponses_.Get(index);
}
inline const TLazyField<::NBench::TReport>& TSubsourceResponseLazy::reponses(int index) const {
  // @@protoc_insertion_point(field_get:NBench.TSubsourceResponseLazy.reponses)
  return _internal_reponses(index);
}
inline TLazyField<::NBench::TReport>* TSubsourceResponseLazy::_internal_add_reponses() {
  return _impl_.reponses_.Add();
}
inline TLazyField<::NBench::TReport>* TSubsourceResponseLazy::add_reponses() {
  TLazyField<::NBench::TReport>* _add = _internal_add_reponses();
  // @@protoc_insertion_point(field_add:NBench.TSubsourceResponseLazy.reponses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< TLazyField<::NBench::TReport> >&
TSubsourceResponseLazy::reponses() const {
  // @@protoc_insertion_point(field_list:NBench.TSubsourceResponseLazy.reponses)
  return _impl_.reponses_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace NBench


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_wraper_2eproto_2epb_2eh
