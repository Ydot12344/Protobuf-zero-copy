// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wraper.proto

#include "wraper.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace NBench {
PROTOBUF_CONSTEXPR TReportWraper::TReportWraper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.some_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.report_)*/nullptr
  , /*decltype(_impl_.some_val_)*/0} {}
struct TReportWraperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TReportWraperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TReportWraperDefaultTypeInternal() {}
  union {
    TReportWraper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TReportWraperDefaultTypeInternal _TReportWraper_default_instance_;
PROTOBUF_CONSTEXPR TReportWraperLazy::TReportWraperLazy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.some_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.report_)*/nullptr
  , /*decltype(_impl_.some_val_)*/0} {}
struct TReportWraperLazyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TReportWraperLazyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TReportWraperLazyDefaultTypeInternal() {}
  union {
    TReportWraperLazy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TReportWraperLazyDefaultTypeInternal _TReportWraperLazy_default_instance_;
PROTOBUF_CONSTEXPR TSubsourceResponse::TSubsourceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reponses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TSubsourceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TSubsourceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TSubsourceResponseDefaultTypeInternal() {}
  union {
    TSubsourceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TSubsourceResponseDefaultTypeInternal _TSubsourceResponse_default_instance_;
PROTOBUF_CONSTEXPR TSubsourceResponseLazy::TSubsourceResponseLazy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reponses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TSubsourceResponseLazyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TSubsourceResponseLazyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TSubsourceResponseLazyDefaultTypeInternal() {}
  union {
    TSubsourceResponseLazy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TSubsourceResponseLazyDefaultTypeInternal _TSubsourceResponseLazy_default_instance_;
}  // namespace NBench
static ::_pb::Metadata file_level_metadata_wraper_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_wraper_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_wraper_2eproto = nullptr;
const ::uint32_t TableStruct_wraper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraper, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraper, _impl_.some_field_),
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraper, _impl_.report_),
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraper, _impl_.some_val_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraperLazy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraperLazy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraperLazy, _impl_.some_field_),
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraperLazy, _impl_.report_),
    PROTOBUF_FIELD_OFFSET(::NBench::TReportWraperLazy, _impl_.some_val_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::NBench::TSubsourceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::NBench::TSubsourceResponse, _impl_.reponses_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::NBench::TSubsourceResponseLazy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::NBench::TSubsourceResponseLazy, _impl_.reponses_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::NBench::TReportWraper)},
        { 14, 25, -1, sizeof(::NBench::TReportWraperLazy)},
        { 28, -1, -1, sizeof(::NBench::TSubsourceResponse)},
        { 37, -1, -1, sizeof(::NBench::TSubsourceResponseLazy)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::NBench::_TReportWraper_default_instance_._instance,
    &::NBench::_TReportWraperLazy_default_instance_._instance,
    &::NBench::_TSubsourceResponse_default_instance_._instance,
    &::NBench::_TSubsourceResponseLazy_default_instance_._instance,
};
const char descriptor_table_protodef_wraper_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014wraper.proto\022\006NBench\032\014common.proto\"V\n\r"
    "TReportWraper\022\022\n\nsome_field\030\001 \001(\t\022\037\n\006rep"
    "ort\030\002 \001(\0132\017.NBench.TReport\022\020\n\010some_val\030\003"
    " \001(\005\"_\n\021TReportWraperLazy\022\022\n\nsome_field\030"
    "\001 \001(\t\022$\n\006report\030\002 \001(\0132\017.NBench.TReportB\003"
    "\200\001\001\022\020\n\010some_val\030\003 \001(\005\"7\n\022TSubsourceRespo"
    "nse\022!\n\010reponses\030\001 \003(\0132\017.NBench.TReport\"@"
    "\n\026TSubsourceResponseLazy\022&\n\010reponses\030\001 \003"
    "(\0132\017.NBench.TReportB\003\200\001\001"
};
static const ::_pbi::DescriptorTable* const descriptor_table_wraper_2eproto_deps[1] =
    {
        &::descriptor_table_common_2eproto,
};
static ::absl::once_flag descriptor_table_wraper_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_wraper_2eproto = {
    false,
    false,
    344,
    descriptor_table_protodef_wraper_2eproto,
    "wraper.proto",
    &descriptor_table_wraper_2eproto_once,
    descriptor_table_wraper_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_wraper_2eproto::offsets,
    file_level_metadata_wraper_2eproto,
    file_level_enum_descriptors_wraper_2eproto,
    file_level_service_descriptors_wraper_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_wraper_2eproto_getter() {
  return &descriptor_table_wraper_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_wraper_2eproto(&descriptor_table_wraper_2eproto);
namespace NBench {
// ===================================================================

class TReportWraper::_Internal {
 public:
  using HasBits = decltype(std::declval<TReportWraper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TReportWraper, _impl_._has_bits_);
  static void set_has_some_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::NBench::TReport& report(const TReportWraper* msg);
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_some_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::NBench::TReport&
TReportWraper::_Internal::report(const TReportWraper* msg) {
  return *msg->_impl_.report_;
}
void TReportWraper::clear_report() {
  if (_impl_.report_ != nullptr) _impl_.report_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TReportWraper::TReportWraper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NBench.TReportWraper)
}
TReportWraper::TReportWraper(const TReportWraper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TReportWraper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.some_field_){}
    , decltype(_impl_.report_){nullptr}
    , decltype(_impl_.some_val_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.some_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.some_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_some_field()) {
    _this->_impl_.some_field_.Set(from._internal_some_field(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_report()) {
    _this->_impl_.report_ = new ::NBench::TReport(*from._impl_.report_);
  }
  _this->_impl_.some_val_ = from._impl_.some_val_;
  // @@protoc_insertion_point(copy_constructor:NBench.TReportWraper)
}

inline void TReportWraper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.some_field_){}
    , decltype(_impl_.report_){nullptr}
    , decltype(_impl_.some_val_){0}
  };
  _impl_.some_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.some_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TReportWraper::~TReportWraper() {
  // @@protoc_insertion_point(destructor:NBench.TReportWraper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TReportWraper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.some_field_.Destroy();
  if (this != internal_default_instance()) delete _impl_.report_;
}

void TReportWraper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TReportWraper::Clear() {
// @@protoc_insertion_point(message_clear_start:NBench.TReportWraper)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.some_field_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.report_ != nullptr);
      _impl_.report_->Clear();
    }
  }
  _impl_.some_val_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TReportWraper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string some_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_some_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "NBench.TReportWraper.some_field");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .NBench.TReport report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_report(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 some_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_some_val(&has_bits);
          _impl_.some_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TReportWraper::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:NBench.TReportWraper)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string some_field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_field().data(), static_cast<int>(this->_internal_some_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NBench.TReportWraper.some_field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_some_field(), target);
  }

  // optional .NBench.TReport report = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::report(this),
        _Internal::report(this).GetCachedSize(), target, stream);
  }

  // optional int32 some_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_some_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NBench.TReportWraper)
  return target;
}

::size_t TReportWraper::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:NBench.TReportWraper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string some_field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_some_field());
    }

    // optional .NBench.TReport report = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.report_);
    }

    // optional int32 some_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_some_val());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TReportWraper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TReportWraper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TReportWraper::GetClassData() const { return &_class_data_; }


void TReportWraper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TReportWraper*>(&to_msg);
  auto& from = static_cast<const TReportWraper&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:NBench.TReportWraper)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_some_field(from._internal_some_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_report()->::NBench::TReport::MergeFrom(
          from._internal_report());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.some_val_ = from._impl_.some_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TReportWraper::CopyFrom(const TReportWraper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NBench.TReportWraper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TReportWraper::IsInitialized() const {
  if (_internal_has_report()) {
    if (!_impl_.report_->IsInitialized()) return false;
  }
  return true;
}

void TReportWraper::InternalSwap(TReportWraper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.some_field_, lhs_arena,
      &other->_impl_.some_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TReportWraper, _impl_.some_val_)
      + sizeof(TReportWraper::_impl_.some_val_)
      - PROTOBUF_FIELD_OFFSET(TReportWraper, _impl_.report_)>(
          reinterpret_cast<char*>(&_impl_.report_),
          reinterpret_cast<char*>(&other->_impl_.report_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TReportWraper::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_wraper_2eproto_getter, &descriptor_table_wraper_2eproto_once,
      file_level_metadata_wraper_2eproto[0]);
}
// ===================================================================

class TReportWraperLazy::_Internal {
 public:
  using HasBits = decltype(std::declval<TReportWraperLazy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TReportWraperLazy, _impl_._has_bits_);
  static void set_has_some_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::TLazyField<::NBench::TReport>& report(const TReportWraperLazy* msg);
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_some_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::TLazyField<::NBench::TReport>&
TReportWraperLazy::_Internal::report(const TReportWraperLazy* msg) {
  return *msg->_impl_.report_;
}
void TReportWraperLazy::clear_report() {
  if (_impl_.report_ != nullptr) _impl_.report_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TReportWraperLazy::TReportWraperLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NBench.TReportWraperLazy)
}
TReportWraperLazy::TReportWraperLazy(const TReportWraperLazy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TReportWraperLazy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.some_field_){}
    , decltype(_impl_.report_){nullptr}
    , decltype(_impl_.some_val_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.some_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.some_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_some_field()) {
    _this->_impl_.some_field_.Set(from._internal_some_field(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_report()) {
    _this->_impl_.report_ = new ::PROTOBUF_NAMESPACE_ID::TLazyField<::NBench::TReport>(*from._impl_.report_);
  }
  _this->_impl_.some_val_ = from._impl_.some_val_;
  // @@protoc_insertion_point(copy_constructor:NBench.TReportWraperLazy)
}

inline void TReportWraperLazy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.some_field_){}
    , decltype(_impl_.report_){nullptr}
    , decltype(_impl_.some_val_){0}
  };
  _impl_.some_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.some_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TReportWraperLazy::~TReportWraperLazy() {
  // @@protoc_insertion_point(destructor:NBench.TReportWraperLazy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TReportWraperLazy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.some_field_.Destroy();
  if (this != internal_default_instance()) delete _impl_.report_;
}

void TReportWraperLazy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TReportWraperLazy::Clear() {
// @@protoc_insertion_point(message_clear_start:NBench.TReportWraperLazy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.some_field_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.report_ != nullptr);
      _impl_.report_->Clear();
    }
  }
  _impl_.some_val_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TReportWraperLazy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string some_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_some_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "NBench.TReportWraperLazy.some_field");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .NBench.TReport report = 2 [lazy_pack = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          if (ctx->IsDerivedFromReleasableBufferStream()) {
            _internal_mutable_report()->InternalParse(ctx->GetBinaryMessageAsBuffersArray(&ptr));
          } else {
            _internal_mutable_report()->InternalParse(ctx->GetBinaryMessage(&ptr));
          }
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 some_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_some_val(&has_bits);
          _impl_.some_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TReportWraperLazy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:NBench.TReportWraperLazy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string some_field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_field().data(), static_cast<int>(this->_internal_some_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NBench.TReportWraperLazy.some_field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_some_field(), target);
  }

  // optional .NBench.TReport report = 2 [lazy_pack = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalPreWriteMessage(2,
        _Internal::report(this).GetCachedSize(), target, stream);
    target = _Internal::report(this).Serialize(target, stream);
  }

  // optional int32 some_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_some_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NBench.TReportWraperLazy)
  return target;
}

::size_t TReportWraperLazy::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:NBench.TReportWraperLazy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string some_field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_some_field());
    }

    // optional .NBench.TReport report = 2 [lazy_pack = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.report_);
    }

    // optional int32 some_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_some_val());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TReportWraperLazy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TReportWraperLazy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TReportWraperLazy::GetClassData() const { return &_class_data_; }


void TReportWraperLazy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TReportWraperLazy*>(&to_msg);
  auto& from = static_cast<const TReportWraperLazy&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:NBench.TReportWraperLazy)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_some_field(from._internal_some_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_report()->::PROTOBUF_NAMESPACE_ID::TLazyField<::NBench::TReport>::MergeFrom(
          from._internal_report());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.some_val_ = from._impl_.some_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TReportWraperLazy::CopyFrom(const TReportWraperLazy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NBench.TReportWraperLazy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TReportWraperLazy::IsInitialized() const {
  if (_internal_has_report()) {
    if (!_impl_.report_->IsInitialized()) return false;
  }
  return true;
}

void TReportWraperLazy::InternalSwap(TReportWraperLazy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.some_field_, lhs_arena,
      &other->_impl_.some_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TReportWraperLazy, _impl_.some_val_)
      + sizeof(TReportWraperLazy::_impl_.some_val_)
      - PROTOBUF_FIELD_OFFSET(TReportWraperLazy, _impl_.report_)>(
          reinterpret_cast<char*>(&_impl_.report_),
          reinterpret_cast<char*>(&other->_impl_.report_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TReportWraperLazy::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_wraper_2eproto_getter, &descriptor_table_wraper_2eproto_once,
      file_level_metadata_wraper_2eproto[1]);
}
// ===================================================================

class TSubsourceResponse::_Internal {
 public:
};

void TSubsourceResponse::clear_reponses() {
  _impl_.reponses_.Clear();
}
TSubsourceResponse::TSubsourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NBench.TSubsourceResponse)
}
TSubsourceResponse::TSubsourceResponse(const TSubsourceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TSubsourceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reponses_){from._impl_.reponses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NBench.TSubsourceResponse)
}

inline void TSubsourceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reponses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TSubsourceResponse::~TSubsourceResponse() {
  // @@protoc_insertion_point(destructor:NBench.TSubsourceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TSubsourceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reponses_.~RepeatedPtrField();
}

void TSubsourceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TSubsourceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NBench.TSubsourceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reponses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSubsourceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .NBench.TReport reponses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reponses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TSubsourceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:NBench.TSubsourceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NBench.TReport reponses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reponses_size()); i < n; i++) {
    const auto& repfield = this->_internal_reponses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NBench.TSubsourceResponse)
  return target;
}

::size_t TSubsourceResponse::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:NBench.TSubsourceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NBench.TReport reponses = 1;
  total_size += 1UL * this->_internal_reponses_size();
  for (const auto& msg : this->_impl_.reponses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TSubsourceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TSubsourceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TSubsourceResponse::GetClassData() const { return &_class_data_; }


void TSubsourceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TSubsourceResponse*>(&to_msg);
  auto& from = static_cast<const TSubsourceResponse&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:NBench.TSubsourceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reponses_.MergeFrom(from._impl_.reponses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TSubsourceResponse::CopyFrom(const TSubsourceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NBench.TSubsourceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSubsourceResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.reponses_))
    return false;
  return true;
}

void TSubsourceResponse::InternalSwap(TSubsourceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.reponses_.InternalSwap(&other->_impl_.reponses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TSubsourceResponse::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_wraper_2eproto_getter, &descriptor_table_wraper_2eproto_once,
      file_level_metadata_wraper_2eproto[2]);
}
// ===================================================================

class TSubsourceResponseLazy::_Internal {
 public:
};

void TSubsourceResponseLazy::clear_reponses() {
  _impl_.reponses_.Clear();
}
TSubsourceResponseLazy::TSubsourceResponseLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NBench.TSubsourceResponseLazy)
}
TSubsourceResponseLazy::TSubsourceResponseLazy(const TSubsourceResponseLazy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TSubsourceResponseLazy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reponses_){from._impl_.reponses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NBench.TSubsourceResponseLazy)
}

inline void TSubsourceResponseLazy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reponses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TSubsourceResponseLazy::~TSubsourceResponseLazy() {
  // @@protoc_insertion_point(destructor:NBench.TSubsourceResponseLazy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TSubsourceResponseLazy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reponses_.~RepeatedPtrField();
}

void TSubsourceResponseLazy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TSubsourceResponseLazy::Clear() {
// @@protoc_insertion_point(message_clear_start:NBench.TSubsourceResponseLazy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reponses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSubsourceResponseLazy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .NBench.TReport reponses = 1 [lazy_pack = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            if (ctx->IsDerivedFromReleasableBufferStream()) {
              _internal_add_reponses()->InternalParse(ctx->GetBinaryMessageAsBuffersArray(&ptr));
            } else {
              _internal_add_reponses()->InternalParse(ctx->GetBinaryMessage(&ptr));
            }
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TSubsourceResponseLazy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:NBench.TSubsourceResponseLazy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NBench.TReport reponses = 1 [lazy_pack = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reponses_size()); i < n; i++) {
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    InternalPreWriteMessage(1,
      this->_internal_reponses(i).GetCachedSize(), target, stream);
  target = this->_internal_reponses(i).Serialize(target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NBench.TSubsourceResponseLazy)
  return target;
}

::size_t TSubsourceResponseLazy::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:NBench.TSubsourceResponseLazy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NBench.TReport reponses = 1 [lazy_pack = true];
  total_size += 1UL * this->_internal_reponses_size();
  for (const auto& msg : this->_impl_.reponses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TSubsourceResponseLazy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TSubsourceResponseLazy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TSubsourceResponseLazy::GetClassData() const { return &_class_data_; }


void TSubsourceResponseLazy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TSubsourceResponseLazy*>(&to_msg);
  auto& from = static_cast<const TSubsourceResponseLazy&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:NBench.TSubsourceResponseLazy)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reponses_.MergeFrom(from._impl_.reponses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TSubsourceResponseLazy::CopyFrom(const TSubsourceResponseLazy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NBench.TSubsourceResponseLazy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSubsourceResponseLazy::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.reponses_))
    return false;
  return true;
}

void TSubsourceResponseLazy::InternalSwap(TSubsourceResponseLazy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.reponses_.InternalSwap(&other->_impl_.reponses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TSubsourceResponseLazy::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_wraper_2eproto_getter, &descriptor_table_wraper_2eproto_once,
      file_level_metadata_wraper_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace NBench
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NBench::TReportWraper*
Arena::CreateMaybeMessage< ::NBench::TReportWraper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NBench::TReportWraper >(arena);
}
template<> PROTOBUF_NOINLINE ::NBench::TReportWraperLazy*
Arena::CreateMaybeMessage< ::NBench::TReportWraperLazy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NBench::TReportWraperLazy >(arena);
}
template<> PROTOBUF_NOINLINE ::NBench::TSubsourceResponse*
Arena::CreateMaybeMessage< ::NBench::TSubsourceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NBench::TSubsourceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::NBench::TSubsourceResponseLazy*
Arena::CreateMaybeMessage< ::NBench::TSubsourceResponseLazy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NBench::TSubsourceResponseLazy >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
