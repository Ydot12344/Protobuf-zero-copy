// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messge.proto

#include "messge.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tutorial {
PROTOBUF_CONSTEXPR TFile::TFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.weights_)*/{}
  , /*decltype(_impl_.hosts_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFileDefaultTypeInternal() {}
  union {
    TFile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFileDefaultTypeInternal _TFile_default_instance_;
PROTOBUF_CONSTEXPR TFileSet::TFileSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.hash_)*/::int64_t{0}} {}
struct TFileSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFileSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFileSetDefaultTypeInternal() {}
  union {
    TFileSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFileSetDefaultTypeInternal _TFileSet_default_instance_;
PROTOBUF_CONSTEXPR TReport::TReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nums_)*/{}
  , /*decltype(_impl_.strings_)*/{}
  , /*decltype(_impl_.setsoffiles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TReportDefaultTypeInternal() {}
  union {
    TReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TReportDefaultTypeInternal _TReport_default_instance_;
}  // namespace tutorial
static ::_pb::Metadata file_level_metadata_messge_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_messge_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_messge_2eproto = nullptr;
const ::uint32_t TableStruct_messge_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::tutorial::TFile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tutorial::TFile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tutorial::TFile, _impl_.weights_),
    PROTOBUF_FIELD_OFFSET(::tutorial::TFile, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tutorial::TFile, _impl_.hosts_),
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tutorial::TFileSet, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tutorial::TFileSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tutorial::TFileSet, _impl_.files_),
    PROTOBUF_FIELD_OFFSET(::tutorial::TFileSet, _impl_.hash_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tutorial::TReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tutorial::TReport, _impl_.nums_),
    PROTOBUF_FIELD_OFFSET(::tutorial::TReport, _impl_.strings_),
    PROTOBUF_FIELD_OFFSET(::tutorial::TReport, _impl_.setsoffiles_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::tutorial::TFile)},
        { 14, 24, -1, sizeof(::tutorial::TFileSet)},
        { 26, -1, -1, sizeof(::tutorial::TReport)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tutorial::_TFile_default_instance_._instance,
    &::tutorial::_TFileSet_default_instance_._instance,
    &::tutorial::_TReport_default_instance_._instance,
};
const char descriptor_table_protodef_messge_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014messge.proto\022\010tutorial\"5\n\005TFile\022\017\n\007Wei"
    "ghts\030\001 \003(\002\022\014\n\004Name\030\002 \002(\t\022\r\n\005Hosts\030\003 \003(\005\""
    "8\n\010TFileSet\022\036\n\005Files\030\001 \003(\0132\017.tutorial.TF"
    "ile\022\014\n\004Hash\030\002 \002(\003\"Q\n\007TReport\022\014\n\004Nums\030\001 \003"
    "(\005\022\017\n\007Strings\030\002 \003(\t\022\'\n\013SetsOfFiles\030\003 \003(\013"
    "2\022.tutorial.TFileSet"
};
static ::absl::once_flag descriptor_table_messge_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messge_2eproto = {
    false,
    false,
    220,
    descriptor_table_protodef_messge_2eproto,
    "messge.proto",
    &descriptor_table_messge_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_messge_2eproto::offsets,
    file_level_metadata_messge_2eproto,
    file_level_enum_descriptors_messge_2eproto,
    file_level_service_descriptors_messge_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messge_2eproto_getter() {
  return &descriptor_table_messge_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messge_2eproto(&descriptor_table_messge_2eproto);
namespace tutorial {
// ===================================================================

class TFile::_Internal {
 public:
  using HasBits = decltype(std::declval<TFile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TFile, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TFile::TFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.TFile)
}
TFile::TFile(const TFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weights_){from._impl_.weights_}
    , decltype(_impl_.hosts_){from._impl_.hosts_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.TFile)
}

inline void TFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weights_){arena}
    , decltype(_impl_.hosts_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TFile::~TFile() {
  // @@protoc_insertion_point(destructor:tutorial.TFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.weights_.~RepeatedField();
  _impl_.hosts_.~RepeatedField();
  _impl_.name_.Destroy();
}

void TFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.TFile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weights_.Clear();
  _impl_.hosts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float Weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_weights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.TFile.Name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 Hosts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hosts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hosts(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TFile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:tutorial.TFile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float Weights = 1;
  for (int i = 0, n = this->_internal_weights_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_weights(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required string Name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.TFile.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated int32 Hosts = 3;
  for (int i = 0, n = this->_internal_hosts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hosts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.TFile)
  return target;
}

::size_t TFile::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:tutorial.TFile)
  ::size_t total_size = 0;

  // required string Name = 2;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float Weights = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weights_size());
    ::size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_weights_size());
    total_size += data_size;
  }

  // repeated int32 Hosts = 3;
  {
    ::size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.hosts_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_hosts_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TFile::GetClassData() const { return &_class_data_; }


void TFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TFile*>(&to_msg);
  auto& from = static_cast<const TFile&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.TFile)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.weights_.MergeFrom(from._impl_.weights_);
  _this->_impl_.hosts_.MergeFrom(from._impl_.hosts_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TFile::CopyFrom(const TFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.TFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TFile::InternalSwap(TFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.weights_.InternalSwap(&other->_impl_.weights_);
  _impl_.hosts_.InternalSwap(&other->_impl_.hosts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TFile::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_messge_2eproto_getter, &descriptor_table_messge_2eproto_once,
      file_level_metadata_messge_2eproto[0]);
}
// ===================================================================

class TFileSet::_Internal {
 public:
  using HasBits = decltype(std::declval<TFileSet>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TFileSet, _impl_._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TFileSet::TFileSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.TFileSet)
}
TFileSet::TFileSet(const TFileSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TFileSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.hash_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.hash_ = from._impl_.hash_;
  // @@protoc_insertion_point(copy_constructor:tutorial.TFileSet)
}

inline void TFileSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.files_){arena}
    , decltype(_impl_.hash_){::int64_t{0}}
  };
}

TFileSet::~TFileSet() {
  // @@protoc_insertion_point(destructor:tutorial.TFileSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TFileSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
}

void TFileSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TFileSet::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.TFileSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  _impl_.hash_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFileSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tutorial.TFile Files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 Hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_hash(&has_bits);
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TFileSet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:tutorial.TFileSet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tutorial.TFile Files = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 Hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.TFileSet)
  return target;
}

::size_t TFileSet::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:tutorial.TFileSet)
  ::size_t total_size = 0;

  // required int64 Hash = 2;
  if (_internal_has_hash()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hash());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tutorial.TFile Files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TFileSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TFileSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TFileSet::GetClassData() const { return &_class_data_; }


void TFileSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TFileSet*>(&to_msg);
  auto& from = static_cast<const TFileSet&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.TFileSet)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  if (from._internal_has_hash()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TFileSet::CopyFrom(const TFileSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.TFileSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFileSet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.files_))
    return false;
  return true;
}

void TFileSet::InternalSwap(TFileSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  swap(_impl_.hash_, other->_impl_.hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFileSet::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_messge_2eproto_getter, &descriptor_table_messge_2eproto_once,
      file_level_metadata_messge_2eproto[1]);
}
// ===================================================================

class TReport::_Internal {
 public:
};

TReport::TReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.TReport)
}
TReport::TReport(const TReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nums_){from._impl_.nums_}
    , decltype(_impl_.strings_){from._impl_.strings_}
    , decltype(_impl_.setsoffiles_){from._impl_.setsoffiles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tutorial.TReport)
}

inline void TReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nums_){arena}
    , decltype(_impl_.strings_){arena}
    , decltype(_impl_.setsoffiles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TReport::~TReport() {
  // @@protoc_insertion_point(destructor:tutorial.TReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nums_.~RepeatedField();
  _impl_.strings_.~RepeatedPtrField();
  _impl_.setsoffiles_.~RepeatedPtrField();
}

void TReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TReport::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.TReport)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nums_.Clear();
  _impl_.strings_.Clear();
  _impl_.setsoffiles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 Nums = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nums(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string Strings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "tutorial.TReport.Strings");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .tutorial.TFileSet SetsOfFiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_setsoffiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TReport::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:tutorial.TReport)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Nums = 1;
  for (int i = 0, n = this->_internal_nums_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nums(i), target);
  }

  // repeated string Strings = 2;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.TReport.Strings");
    target = stream->WriteString(2, s, target);
  }

  // repeated .tutorial.TFileSet SetsOfFiles = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_setsoffiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_setsoffiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.TReport)
  return target;
}

::size_t TReport::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:tutorial.TReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Nums = 1;
  {
    ::size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.nums_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_nums_size());
    total_size += data_size;
  }

  // repeated string Strings = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.strings_.size());
  for (int i = 0, n = _impl_.strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.strings_.Get(i));
  }

  // repeated .tutorial.TFileSet SetsOfFiles = 3;
  total_size += 1UL * this->_internal_setsoffiles_size();
  for (const auto& msg : this->_impl_.setsoffiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TReport::GetClassData() const { return &_class_data_; }


void TReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TReport*>(&to_msg);
  auto& from = static_cast<const TReport&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.TReport)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nums_.MergeFrom(from._impl_.nums_);
  _this->_impl_.strings_.MergeFrom(from._impl_.strings_);
  _this->_impl_.setsoffiles_.MergeFrom(from._impl_.setsoffiles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TReport::CopyFrom(const TReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.TReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TReport::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.setsoffiles_))
    return false;
  return true;
}

void TReport::InternalSwap(TReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nums_.InternalSwap(&other->_impl_.nums_);
  _impl_.strings_.InternalSwap(&other->_impl_.strings_);
  _impl_.setsoffiles_.InternalSwap(&other->_impl_.setsoffiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TReport::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_messge_2eproto_getter, &descriptor_table_messge_2eproto_once,
      file_level_metadata_messge_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tutorial::TFile*
Arena::CreateMaybeMessage< ::tutorial::TFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::TFile >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::TFileSet*
Arena::CreateMaybeMessage< ::tutorial::TFileSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::TFileSet >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::TReport*
Arena::CreateMaybeMessage< ::tutorial::TReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::TReport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
